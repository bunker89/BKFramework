크리티컬 섹션 검증
각 번호가 원자적으로 동작

크리티컬 섹션 (1) 패킷의 관리
1. 생명 주기가 생길 때 새로운 리스트를 만들어 놓고 기존 리스트로 패킷을 만든다.
2. 패킷이 접근하면 현재 피어가 생명주기 안에 있는지 여부를 확인한다.
     실행중이지 않으면 실행중이지 않음을 리턴하고 생명주기를 예약한다. (예약 후 실행 간에 동기화가 적용되지 않음)
     실행 중이면 실행중임을 리턴한다. 
3. 리스트가 비었으면 실행 상태를 실행중이지 않음으로 바꾸고 재실행 필요없음을 리턴한다.
     리스트에 남아 있으면 실행 상태를 유지하고 재실행 필요함을 리턴한다.
4. 생명주기를 예약한다. 이미 예약된 생명주기가 있으면 실패를 리턴하고
     예약되거나 실행중이지 않으면 예약을 하고 성공을 리턴한다.

	@Override
	public void life() {
	-------------------------(1)----------------------------
		synchronized (mNonPrehandleMutex) {
			Iterator<PacketType> iterator = mNonPrehandleList.iterator();
			mNonPrehandleList = new LinkedList();		
	
			while (iterator.hasNext()) {
				pushPacket(iterator.next());
				iterator.remove();
			}
		}
	-------------------------(1)----------------------------
	}

	@Override
	final public boolean dispatch(PacketType read) {
		boolean ret;
		//동기화 시작
	-------------------------(1)----------------------------
		synchronized (mNonPrehandleMutex) {
			ret = isHandling;
			if (isHandling == false) {
				isHandling = true;
			}
			mNonPrehandleList.add(read);
		}
	-------------------------(1)----------------------------
		return ret;
	}
	
	@Override
	public boolean needRecycle() {
		boolean ret;
	-------------------------(1)----------------------------
		synchronized (mNonPrehandleMutex) {
			if (mNonPrehandleList.isEmpty())
				isHandling = false;
			ret = isHandling;
		}
	-------------------------(1)----------------------------
		return ret;
	}
	
	
	@Override
	public boolean interceptCycle() {
		boolean ret;
		//동기화 시작
	-------------------------(1)----------------------------
		synchronized (mNonPrehandleMutex) {
			ret = isHandling;
			if (isHandling == false) {
				isHandling = true;
			}
		}
	-------------------------(1)----------------------------
		return !ret;
	}
	
	
	
변경 중인사항
	@Override
	public void life() {
	-------------------------(1)----------------------------
		synchronized (mNonPrehandleMutex) {
			Iterator<PacketType> iterator = mNonPrehandleList.iterator();
			mNonPrehandleList = new LinkedList();		
	-------------------------(1)----------------------------
	
			while (iterator.hasNext()) {
				pushPacket(iterator.next());
				iterator.remove();
			}
		}
	}